#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros +Q -m qlot -L sbcl-bin -- $0 "$@"
|#

(ros:include "util")

(defpackage #:ros/script/qlot
  (:use #:cl)
  (:import-from #:roswell.util
                #:which
                #:setenv))
(in-package #:ros/script/qlot)

(unless (find-package :uiop)
  (ros:quicklisp)
  (funcall (find-symbol #.(string :quickload) :ql) :uiop :silent t))

(defun print-error (format-control &rest format-arguments)
  (fresh-line *error-output*)
  (princ "Error: " *error-output*)
  (apply #'format *error-output* format-control format-arguments)
  (fresh-line *error-output*)
  (ros:quit -1))

(defun print-usage ()
  (format *error-output*
          "~&Usage: ~A COMMAND [ARGS..]

COMMANDS:
    install
        Installs libraries to './quicklisp'.

    update
        Makes './quicklisp' up-to-date and update 'qlfile.lock'.

    bundle
        Dumps all libraries to './bundle-libs' to allow to load them without Qlot and Quicklisp.

    run
        Starts REPL with the project local Quicklisp dists (Same as 'qlot exec ros run').

    exec [shell-args..]
        Invokes the following shell-command with the project local Quicklisp.
"
          (file-namestring *load-pathname*)))

(defun use-local-quicklisp ()
  ;; Set QUICKLISP_HOME ./quicklisp/
  (unless (ros:getenv "QUICKLISP_HOME")
    (setenv "QUICKLISP_HOME" "quicklisp/"))
  (let ((path (or (probe-file (ros:getenv "QUICKLISP_HOME"))
                  (merge-pathnames (ros:getenv "QUICKLISP_HOME")
                                   (make-pathname :defaults *load-pathname* :name nil :type nil)))))
    (unless (probe-file path)
      (print-error "'~A' does not exist."
                   (ros:getenv "QUICKLISP_HOME")))
    (unless (probe-file (merge-pathnames "setup.lisp" path))
      (print-error "Invalid Quicklisp directory: '~A'"
                   (ros:getenv "QUICKLISP_HOME"))))

  ;; Overwrite CL_SOURCE_REGISTRY to the current directory
  (setenv "CL_SOURCE_REGISTRY"
          (uiop:native-namestring (probe-file *default-pathname-defaults*))))

(defun main (&optional $1 &rest argv)
  (declare (ignorable argv))
  (handler-case
      (cond ((equal "install" $1)
             (when (and (first argv)
                        (not (probe-file (first argv))))
               (print-error "'~A' does not found." (first argv)))
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (if argv
                 (uiop:symbol-call :qlot :install (probe-file (first argv)))
                 (uiop:symbol-call :qlot :install)))
            ((equal "update" $1)
             (when (and (first argv)
                        (not (probe-file (first argv))))
               (print-error "'~A' does not found." (first argv)))
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (if argv
                 (uiop:symbol-call :qlot :update (probe-file (first argv)))
                 (uiop:symbol-call :qlot :update)))
            ((equal "bundle" $1)
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (uiop:symbol-call :qlot :bundle))
            ((equal "run" $1)
             (use-local-quicklisp)

             (let ((ros (funcall (or #+win32 (lambda (x) (substitute #\\ #\/ x)) #'identity)
                                 (if (zerop (length (ros:opt "wargv0")))
                                     (ros:opt "argv0")
                                     (ros:opt "wargv0")))))
               (ros:exec (list ros "run"))))
            ((equal "exec" $1)
             (use-local-quicklisp)

             ;; Add ~/.roswell/bin to $PATH
             (setenv "PATH"
                     (format nil "~A:~A"
                             (merge-pathnames "bin/" (roswell.util:homedir))
                             (ros:getenv "PATH")))

             (let ((command (which (first argv))))
               (unless command
                 (print-error "Command not found: ~A" (first argv)))
               (ros:exec (cons command (rest argv)))))
            (t (print-usage)
               (ros:quit 1)))
    #+sbcl (sb-sys:interactive-interrupt () (uiop:quit -1 nil))))
