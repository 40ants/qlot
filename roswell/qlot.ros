#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros +Q -L sbcl-bin -- $0 "$@"
|#

(ros:include "util")

(defpackage #:ros/script/qlot
  (:use #:cl)
  (:import-from #:roswell.util
                #:which
                #:setenv))
(in-package #:ros/script/qlot)

(unless (find-package :uiop)
  (ros:quicklisp)
  (funcall (find-symbol #.(string :quickload) :ql) :uiop :silent t))

(defun print-error (format-control &rest format-arguments)
  (fresh-line *error-output*)
  (princ "Error: " *error-output*)
  (apply #'format *error-output* format-control format-arguments)
  (fresh-line *error-output*)
  (ros:quit -1))

(defun print-usage ()
  (format *error-output*
          "~&Usage: ~A COMMAND [ARGS..]

COMMANDS:
    install
        Installs libraries to './quicklisp'.

    update
        Makes './quicklisp' up-to-date and update 'qlfile.lock'.
        Possible to update specific projects with --project option.
        ex) qlot update --project mito

    bundle
        Dumps all libraries to './bundle-libs' to allow to load them without Qlot and Quicklisp.

    run
        Starts REPL with the project local Quicklisp dists (Same as 'qlot exec ros run').

    exec [shell-args..]
        Invokes the following shell-command with the project local Quicklisp.

OPTIONS:
    --version
        Show the Qlot version
"
          (file-namestring *load-pathname*)))

(defun print-version ()
  (format t "~&Qlot ~A~%"
          (asdf:component-version (asdf:find-system :qlot))))

(defun use-local-quicklisp ()
  ;; Set QUICKLISP_HOME ./quicklisp/
  (unless (ros:getenv "QUICKLISP_HOME")
    (setenv "QUICKLISP_HOME" "quicklisp/"))
  (let ((path (or (probe-file (ros:getenv "QUICKLISP_HOME"))
                  (merge-pathnames (ros:getenv "QUICKLISP_HOME")
                                   (make-pathname :defaults *load-pathname* :name nil :type nil)))))
    (unless (probe-file path)
      (print-error "'~A~A' does not exist."
                   *default-pathname-defaults*
                   (ros:getenv "QUICKLISP_HOME")))
    (unless (probe-file (merge-pathnames "setup.lisp" path))
      (print-error "Invalid Quicklisp directory: '~A'"
                   (ros:getenv "QUICKLISP_HOME"))))

  ;; Overwrite CL_SOURCE_REGISTRY to the current directory
  (ros:quicklisp)
  (uiop:symbol-call :ql :quickload :qlot :silent t)
  (setenv "CL_SOURCE_REGISTRY"
          (uiop:symbol-call :qlot/util :extend-source-registry
                            (uiop:getenv "CL_SOURCE_REGISTRY")
                            (uiop:native-namestring (probe-file *default-pathname-defaults*)))))

(defmacro case-equal (keyform &body cases)
  (let ((g-keyform (gensym "KEYFORM")))
    `(let ((,g-keyform ,keyform))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test #'equal)
                             ,@body))))))

(defun split (div sequence)
  (let ((pos (position div sequence)))
    (if pos
        (list* (subseq sequence 0 pos)
               (split div (subseq sequence (1+ pos))))
        (list sequence))))

(defun parse-argv (argv)
  (let ((target nil)
        (projects '())
        (parsing-options nil))
    (loop for option = (pop argv)
          while option
          do (case-equal option
               ("--project"
                (setf parsing-options t)
                (let ((project (pop argv)))
                  (setf projects
                        (append
                         projects
                         (remove ""
                                 (split #\, project)
                                 :test 'equal)))))
               ("--version"
                (print-version)
                (ros:quit))
               (otherwise
                (unless (and (null parsing-options)
                             (null target))
                  (error "Unknown option: ~A" option))
                (setf target option))))
    (if target
        (list (or (probe-file target)
                  (print-error "'~A' does not exist." target))
              :projects projects)
        (list :projects projects))))


(defun main (&optional $1 &rest argv)
  (declare (ignorable argv))
  (handler-case
      (cond ((equal "install" $1)
             (when (and (first argv)
                        (not (probe-file (first argv))))
               (print-error "'~A' does not found." (first argv)))
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (if argv
                 (uiop:symbol-call :qlot :install (probe-file (first argv)))
                 (uiop:symbol-call :qlot :install)))
            ((equal "update" $1)
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (apply #'uiop:symbol-call :qlot :update (parse-argv argv)))
            ((equal "bundle" $1)
             (ros:quicklisp)
             (uiop:symbol-call :ql :quickload :qlot :silent t)
             (uiop:symbol-call :qlot :bundle))
            ((equal "run" $1)
             (use-local-quicklisp)

             (let ((ros (funcall (or #+win32 (lambda (x) (substitute #\\ #\/ x)) #'identity)
                                 (if (zerop (length (ros:opt "wargv0")))
                                     (ros:opt "argv0")
                                     (ros:opt "wargv0")))))
               (ros:exec (list ros "run"))))
            ((equal "exec" $1)
             (use-local-quicklisp)

             ;; Add ~/.roswell/bin to $PATH
             (setenv "PATH"
                     (format nil "~A:~A"
                             (merge-pathnames "bin/" (roswell.util:homedir))
                             (ros:getenv "PATH")))

             (let ((command (which (first argv))))
               (unless command
                 (print-error "Command not found: ~A" (first argv)))
               (ros:exec (cons command (rest argv)))))
            ((equal "--version" $1)
             (print-version)
             (ros:quit))
            (t (print-usage)
               (ros:quit 1)))
    #+sbcl (sb-sys:interactive-interrupt () (uiop:quit -1 nil))))
