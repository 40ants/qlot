#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros +Q -L sbcl-bin -- $0 "$@"
|#
(progn ;;init forms
  (ros:include "util")
  (ros:ensure-asdf)
  (let ((*standard-output* (make-broadcast-stream))
        (*trace-output* (make-broadcast-stream)))
    (funcall (intern (string '#:load-system) '#:asdf) '#:qlot/cli)
    (funcall (intern (string '#:load-system) '#:asdf) '#:qlot/logger)
    (funcall (intern (string '#:load-system) '#:asdf) '#:qlot/errors)))

(defpackage #:ros/script/qlot
  (:use #:cl)
  (:import-from #:roswell.util
                #:which
                #:setenv
                #:homedir))
(in-package #:ros/script/qlot)

(defun print-usage ()
  (format *error-output*
          "~&Usage: ~A COMMAND [ARGS..]

COMMANDS:
    install
        Installs libraries to './.qlot'.

    update
        Makes './.qlot' up-to-date and update 'qlfile.lock'.
        Possible to update specific projects with --project option.
        ex) qlot update --project mito

    bundle
        Dumps all libraries to './bundle-libs' to allow to load them without Qlot and Quicklisp.

    run
        Starts REPL with the project local Quicklisp dists (Same as 'qlot exec ros run').

    exec [shell-args..]
        Invokes the following shell-command with the project local Quicklisp.

OPTIONS:
    --version
        Show the Qlot version
    --debug
        A flag to enable debug logging. (Only for 'install' or 'update')
"
          (file-namestring *load-pathname*)))

(defun print-version ()
  (format t "~&Qlot ~A~%"
          (asdf:component-version (asdf:find-system :qlot))))

(defun use-local-quicklisp ()
  ;; Set QUICKLISP_HOME ./.qlot/
  (unless (ros:getenv "QUICKLISP_HOME")
    (when (and (not (uiop:directory-exists-p #P".qlot/"))
               (uiop:directory-exists-p #P"quicklisp/")
               (uiop:file-exists-p #P"quicklisp/setup.lisp"))
      (qlot/cli:rename-quicklisp-to-dot-qlot nil t))
    (setenv "QUICKLISP_HOME" ".qlot/"))
  (let ((path (or (probe-file (ros:getenv "QUICKLISP_HOME"))
                  (merge-pathnames (ros:getenv "QUICKLISP_HOME")
                                   (make-pathname :defaults *load-pathname* :name nil :type nil)))))
    (unless (probe-file path)
      (qlot/errors:ros-command-error "'~A~A' does not exist."
                                     *default-pathname-defaults*
                                     (ros:getenv "QUICKLISP_HOME")))
    (unless (probe-file (merge-pathnames "setup.lisp" path))
      (qlot/errors:ros-command-error "Invalid Quicklisp directory: '~A'"
                                     (ros:getenv "QUICKLISP_HOME"))))

  ;; Overwrite CL_SOURCE_REGISTRY to the current directory
  (setenv "CL_SOURCE_REGISTRY"
          (qlot/cli:extend-source-registry
            (uiop:getenv "CL_SOURCE_REGISTRY")
            (uiop:native-namestring (truename *default-pathname-defaults*)))))

(defmacro case-equal (keyform &body cases)
  (let ((g-keyform (gensym "KEYFORM")))
    `(let ((,g-keyform ,keyform))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test #'equal)
                             ,@body))))))

(defun split (div sequence)
  (let ((pos (position div sequence)))
    (if pos
        (list* (subseq sequence 0 pos)
               (split div (subseq sequence (1+ pos))))
        (list sequence))))

(defun parse-argv (argv)
  (let ((target nil)
        (projects '()))
    (loop for option = (pop argv)
          while option
          do (case-equal option
               ("--project"
                 (unless argv
                   (qlot/errors:ros-command-error "--project requires a project name"))
                 (setf projects
                       (append projects
                               (remove ""
                                       (split #\, (pop argv))
                                       :test 'equal))))
               ("--version"
                 (print-version)
                 (ros:quit))
               ("--debug"
                 (setf qlot/logger:*debug* t))
               (otherwise
                 (if target
                     (qlot/errors:ros-command-error "'~A' is unknown option" option)
                     (setf target option))))
          finally
          (return
           (cons target (and projects (list :projects projects)))))))

(defun main (&optional $1 &rest argv)
  (declare (ignorable argv))
  (handler-case
      (cond ((equal "install" $1)
             (ros:quicklisp)
             (apply #'qlot/cli:install (parse-argv argv)))
            ((equal "update" $1)
             (ros:quicklisp)
             (apply #'qlot/cli:update (parse-argv argv)))
            ((equal "run" $1)
             (use-local-quicklisp)

             (let ((ros (funcall (or #+win32 (lambda (x) (substitute #\\ #\/ x)) #'identity)
                                 (if (zerop (length (ros:opt "wargv0")))
                                     (ros:opt "argv0")
                                     (ros:opt "wargv0")))))
               (ros:exec (list ros "run"))))
            ((equal "exec" $1)
             (use-local-quicklisp)

             ;; Add ~/.roswell/bin to $PATH
             (setenv "PATH"
                     (format nil "~A:~A"
                             (merge-pathnames "bin/" (homedir))
                             (ros:getenv "PATH")))

             (let ((command (which (first argv))))
               (unless command
                 (qlot/errors:ros-command-error "Command not found: ~A" (first argv)))
               (ros:exec (cons command (rest argv)))))
            ((equal "--version" $1)
             (print-version)
             (ros:quit))
            (t (error 'qlot/errors:command-not-found :command $1)))
    #+sbcl (sb-sys:interactive-interrupt () (uiop:quit -1 nil))
    (qlot/errors:command-not-found (e)
      (format *error-output* "~&~C[31m~A~C[0m~%" #\Esc e #\Esc)
      (print-usage)
      (uiop:quit -1))
    (qlot/errors:qlot-error (e)
      (format *error-output* "~&~C[31mqlot: ~A~C[0m~%" #\Esc e #\Esc)
      (uiop:quit -1))))
